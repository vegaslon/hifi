<@include gpu/Config.slh@>
<$VERSION_HEADER$>
//  Generated on <$_SCRIBE_DATE$>
//
//  simple_transparent_textured.slf
//  fragment shader
//
//  Created by Sam Gateau on 4/3/17.
//  Copyright 2017 High Fidelity, Inc.
//
//  Distributed under the Apache License, Version 2.0.
//  See the accompanying file LICENSE or http://www.apache.org/licenses/LICENSE-2.0.html
//

<@include gpu/Color.slh@>

<@include DeferredBufferWrite.slh@>
<@include DeferredGlobalLight.slh@>
<$declareEvalGlobalLightingAlphaBlended()$>

<@include gpu/Transform.slh@>
<$declareStandardCameraTransform()$>

// the albedo texture
uniform sampler2D originalTexture;

// the interpolated normal
in vec4 _position;
in vec3 _normal;
in vec4 _color;
in vec2 _texCoord0;

void main(void) {
    vec4 texel = texture(originalTexture, _texCoord0.st);
    float opacity = _color.a;
    if (_color.a <= 0.0) {
        texel = colorToLinearRGBA(texel);
        opacity = -_color.a;
    }
    opacity *= texel.a;
    vec3 albedo = _color.rgb * texel.rgb;

    vec3 fragPosition = _position.xyz;
    vec3 fragNormal = normalize(_normal);

    TransformCamera cam = getTransformCamera();

    _fragColor0 = vec4(evalGlobalLightingAlphaBlended(
        cam._viewInverse,
        1.0,
        1.0,
        fragPosition,
        fragNormal,
        albedo,
        DEFAULT_FRESNEL,
        0.0,
        vec3(0.0f),
        DEFAULT_ROUGHNESS,
        opacity),
        opacity);

}